import re
from tqdm import tqdm

class SpellCheck:
    def __init__(self, word_dict_file=None):
        self.string_to_check = None
        with open(word_dict_file, 'r', encoding='utf-8') as file:
            data = file.read().split(",")
            self.dictionary = list(set(word.lower() for word in data))

    def levenshtein_distance(self, word1, word2):
        m, n = len(word1), len(word2)
        dp = [[0] * (n + 1) for _ in range(m + 1)]

        for i in range(m + 1):
            dp[i][0] = i
        for j in range(n + 1):
            dp[0][j] = j

        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if word1[i-1] == word2[j-1]:
                    dp[i][j] = dp[i-1][j-1]
                else:
                    dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1

        return dp[m][n]

    def similarity_score(self, word1, word2):
        distance = self.levenshtein_distance(word1.lower(), word2.lower())
        max_len = max(len(word1), len(word2))
        # Convert distance to a similarity score (0-100)
        return max(0, (1 - distance / max_len) * 100)

    def check(self, string_to_check):
        self.string_to_check = string_to_check

    def suggestions(self):
        string_words = self.string_to_check.split()
        suggestions = []

        for word in string_words:
            best_match = None
            best_score = 0

            for dict_word in self.dictionary:
                score = self.similarity_score(word, dict_word)
                if score >= 60 and score > best_score:
                    best_match = dict_word
                    best_score = score

            if best_match:
                suggestions.append(best_match)

        return suggestions

    def correct(self):
        tokens = re.findall(r'\w+|[^\w\s]|\s+', self.string_to_check, re.UNICODE)
        corrected_tokens = []

        for token in tqdm(tokens, "Correcting words: "):
            if re.match(r'\w+', token, re.UNICODE):
                best_match = None
                best_score = 0

                for dict_word in self.dictionary:
                    score = self.similarity_score(token, dict_word)
                    if score >= 60 and score > best_score:
                        best_match = dict_word
                        best_score = score

                corrected_tokens.append(best_match if best_match else token)
            else:
                corrected_tokens.append(token)

        return "".join(corrected_tokens)